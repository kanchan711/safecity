# -*- coding: utf-8 -*-
"""app_case_study1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sdPJudCzS6lHChL4GvmHid3qq--QDL0H
"""

from flask import Flask, jsonify, request
import numpy as np
import pandas as pd
import numpy as np
from sklearn import linear_model
from bs4 import BeautifulSoup
import re
import joblib

# !pip install --upgrade scikit-learn==0.20.3

import flask
app = Flask(__name__)

import re


def preprocess(sentence):

    """Do all the Preprocessing as shown above and
    return a tuple contain preprocess_email,preprocess_subject,preprocess_text for that Text_data"""
    sentence = sentence.lower()
    sentence = re.sub('<[^>]+>', '', sentence)    #removing words under tags
    sentence = re.sub(r"\([^()]*\)", "", sentence)  #removing words under parentheses 
    sentence = re.sub('[^A-Za-z0-9]+', " ", sentence)  # removing all special char and spaces ect.
    sentence = re.sub(r'\w+:\s?',"", sentence)   # removing word ending with ':'
      # sentence = re.sub(r"n\'t", " not", phrase)

      #decontractions
    sentence = re.sub(r"n\'t", " not", sentence)
    sentence = re.sub(r"\'re", " are", sentence)
    sentence = re.sub(r"\'s", " is", sentence)
    sentence = re.sub(r"\'d", " would", sentence)
    sentence = re.sub(r"\'ll", " will", sentence)
    sentence = re.sub(r"\'t", " not", sentence)
    sentence = re.sub(r"\'ve", " have", sentence)
    sentence = re.sub(r"\'m", " am", sentence)
    short_word =re.compile(r'\W*\b\w{1,2}\b')  # removing short word=2
    sentence = short_word.sub('', sentence) 
    return( sentence)

@app.route('/index')
def index():
    return flask.render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    clf = joblib.load('model.pkl')
    count_vect = joblib.load('count_vect.pkl')
    to_predict_list = request.form.to_dict()
    review_text = preprocess(to_predict_list['review_text'])
    test_vect = count_vect.transform(([review_text]))
    pred = clf.predict(count_vect.transform([review_text]))
    
    if pred[0][0]==0 and pred[0][1]==0 and pred[0][2]==0:
        prediction = "No harassment"
    elif pred[0][0]==1 and pred[0][1]==1 and pred[0][2]==1:
        prediction = "case comes under all category: commenting, ogling, touching"
    elif pred[0][0]==0 and pred[0][1]==0 and pred[0][2]==1:
        prediction = "case comes under 3rd category: touching"
    elif pred[0][0]==0 and pred[0][1]==1 and pred[0][2]==1:
        prediction = "case comes under 2nd and 3rd category: ogling and touching"
    elif pred[0][0]==1 and pred[0][1]==1 and pred[0][2]==0:
        prediction = "case comes under 1st and 2nd category: commenting and ogling"
    elif pred[0][0]==1 and pred[0][1]==0 and pred[0][2]==0:
        prediction = "case comes under 1st category: commenting"
    else:
        prediction = "error"
        print("test",type(pred[0]), pred[0], type(pred[0][0]),pred[0][1], pred[0][2])
        
    return jsonify({'prediction': prediction})
  
if __name__ == '__main__':
    # app.debug = True  
    app.run(host='0.0.0.0', port=5050)
    # app.run(debug=True, use_reloader=False)

