# -*- coding: utf-8 -*-
"""model_case_study1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xHPKUkGGd28VDMZeynr1zzOTWHNRnwbd
"""

# import matplotlib.pyplot as plt
import joblib
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
import re
from sklearn.multiclass import OneVsRestClassifier
from sklearn import metrics
from sklearn.svm import SVC

data = pd.read_csv("train_case1.csv")
# data = pd.read_csv("/content/drive/MyDrive/train_case1.csv")

X_train = data["Description"]
train_y= data.drop("Description", axis=1)

def preprocess(sentence):

    """Do all the Preprocessing as shown above and
    return a tuple contain preprocess_email,preprocess_subject,preprocess_text for that Text_data"""
    sentence = sentence.lower()
    sentence = re.sub('<[^>]+>', '', sentence)    #removing words under tags
    sentence = re.sub(r"\([^()]*\)", "", sentence)  #removing words under parentheses 
    sentence = re.sub('[^A-Za-z0-9]+', " ", sentence)  # removing all special char and spaces ect.
    sentence = re.sub(r'\w+:\s?',"", sentence)   # removing word ending with ':'
      # sentence = re.sub(r"n\'t", " not", phrase)

      #decontractions
    sentence = re.sub(r"n\'t", " not", sentence)
    sentence = re.sub(r"\'re", " are", sentence)
    sentence = re.sub(r"\'s", " is", sentence)
    sentence = re.sub(r"\'d", " would", sentence)
    sentence = re.sub(r"\'ll", " will", sentence)
    sentence = re.sub(r"\'t", " not", sentence)
    sentence = re.sub(r"\'ve", " have", sentence)
    sentence = re.sub(r"\'m", " am", sentence)
    short_word =re.compile(r'\W*\b\w{1,2}\b')  # removing short word=2
    sentence = short_word.sub('', sentence) 
    return( sentence)
    # return (emails)

preprocessed_reviews = []
for sentence in X_train.values:
    preprocessed_reviews.append(preprocess(sentence))

# preprocessed_text = preprocess(X_train)

preprocessed_reviews[0]

def predict(string):
    clf = joblib.load('model.pkl')
    count_vect = joblib.load('count_vect.pkl')
    review_text = preprocess(string)
    test_vect = count_vect.transform(([review_text]))
    pred = clf.predict(test_vect)
    print (pred[0])
    if pred[0][0]==0 & pred[0][1]==0 & pred[0][2]==0:
      prediction = "No harassment"
    elif pred[0][0]==1 & pred[0][1]==1 & pred[0][2]==1:
      prediction = "case comes under all category: commenting, ogling, touching"
    elif pred[0][0]==0 & pred[0][1]==0 & pred[0][2]==1:
      prediction = "case comes under 3rd category: touching"
    elif pred[0][0]==0 & pred[0][1]==1 & pred[0][2]==1:
      prediction = "case comes under 2nd and 3rd category: ogling and touching"
    elif pred[0][0]==1 & pred[0][1]==1 & pred[0][2]==0:
      prediction = "case comes under 1st and 2nd category: commenting and ogling"
    elif pred[0][0]==1 & pred[0][1]==0 & pred[0][2]==0:
      prediction = "case comes under 1st category: commenting"
    else:
      prediction = "error"
    return prediction

tf_vectorize= TfidfVectorizer()
tf_vectorize.fit(preprocessed_reviews)
joblib.dump(tf_vectorize, 'count_vect.pkl')
X = tf_vectorize.transform(preprocessed_reviews)

clf = OneVsRestClassifier(SVC(probability=True), n_jobs=-1)  
clf.fit(X, train_y)
joblib.dump(clf, 'model.pkl')

print(predict('Catcalls and passing comments were two of the ghastly things the Delhi police at the International Airport put me and my friend through. It is appalling that the protectors and law enforcers at the airport can make someone so uncomfortable'))

